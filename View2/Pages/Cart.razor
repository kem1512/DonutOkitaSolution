@page "/cart"
@using Data.DomainClass
@using Data.ViewModels
@inject ISessionStorageService Session

<div class="container-fluid mt--7">
    <div class="row">
        <div class="col-xl-8">
            <div class="card bg-secondary shadow">
                <div class="card-header bg-white border-0">
                    <div class="row align-items-center">
                        <div class="col">
                            <strong class="mb-0">Giỏ hàng</strong>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if(Model != null){
                        @foreach (var x in Model.Select((Value, Index) => new { Value, Index }))
                    {
                            <div class="row mb-4">
                                <div class="col">
                                    <a href=""><img src="@x.Value.SanPhamViewModel?.ChiTietSp?.Anh" class="w-75"/></a>
                                </div>
                                <div class="col">
                                    <p>@x.Value.SanPhamViewModel?.SanPham?.Ten</p>
                                    <p class="text-muted">Màu sắc : @x.Value.SanPhamViewModel?.MauSac?.Ten</p>
                                    <button class="btn btn-danger">Xóa</button>
                                </div>
                                <div class="col text-center">
                                    <div class="d-flex" style="height: 2.3rem">
                                        <button class="btn btn-danger mr-0" @onclick="() => Reduce(x.Index)"><i class="ni ni-fat-delete"></i></button>
                                        <input style="height: 2.3rem" type="number" class="form-control form-control-alternative" value="@x.Value.Quantity"/>
                                        <button class="btn btn-info" @onclick="() => Increase(x.Index)"><i class="ni ni-fat-add"></i></button>
                                    </div>
                                    <p class="mt-3 font-weight-bold">@string.Format("{0:0,0}", x.Value.SanPhamViewModel?.ChiTietSp?.GiaBan * @x.Value.Quantity) VNĐ</p>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-xl-4">
            <div class="card bg-secondary shadow">
                <div class="card-header bg-white border-0">
                    <div class="row align-items-center">
                        <div class="col">
                            <strong class="mb-0">Hóa đơn</strong>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <EditForm Model="HoaDon">
                        <DataAnnotationsValidator />
                        <div class="d-block">
                            <div class="form-group">
                                <label class="form-control-label" for="input-name">Tên người nhận</label>
                                <input type="text" id="input-name" @bind-value="HoaDon.TenNguoiNhan" class="form-control form-control-alternative" placeholder="Nhập tên người nhận">
                            </div>
                        </div>
                        <div class="d-block">
                            <div class="form-group">
                                <label class="form-control-label" for="input-address">Địa chỉ</label>
                                <input type="text" id="input-address" @bind-value="HoaDon.DiaChi" class="form-control form-control-alternative" placeholder="Nhập địa chỉ">
                            </div>
                        </div>
                        <div class="d-block">
                            <div class="form-group">
                                <label class="form-control-label" for="input-phone">Số điện thoại</label>
                                <input type="text" id="input-phone" @bind-value="HoaDon.Sdt" class="form-control form-control-alternative" placeholder="Nhập số điện thoại">
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer">
                    <div class="d-flex align-items-center justify-content-between">
                        <button class="btn btn-primary" @onclick="AddOrder">Xác nhận</button>
                        <h3 class="text-muted text-right">Tổng tiền: @string.Format("{0:0,0}", @Total) VNĐ</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GioHangViewModel>? Model;
    private HoaDon HoaDon = new HoaDon() { Id = Guid.NewGuid() };
    private decimal? Total = 0;

    protected override async Task OnInitializedAsync()
    {
        Model = await Session.GetItemAsync<List<GioHangViewModel>>("cart");
        if (Model != null)
        {
            Total = Model.Sum(c => c.SanPhamViewModel?.ChiTietSp?.GiaBan * c.Quantity);
        }
    }

    private void ReTotal(){

        Total = Model?.Sum(c => c.SanPhamViewModel?.ChiTietSp?.GiaBan * c.Quantity);
    }

    private async Task Increase(int id)
    {
        var result = Model?[id];
        List<GioHangViewModel> cart = await Session.GetItemAsync<List<GioHangViewModel>>("cart");
        if (result != null)
        {
            result.Quantity += 1;
            cart[id] = result;
        }
        await Session.SetItemAsync<List<GioHangViewModel>>("cart", cart);
        await Task.Run(ReTotal);
    }

    private async Task Reduce(int id)
    {
        var result = Model?[id];
        List<GioHangViewModel> cart = await Session.GetItemAsync<List<GioHangViewModel>>("cart");
        if (result != null && result.Quantity > 1)
        {
            result.Quantity -= 1;
            cart[id] = result;
        }
        else
        {
            cart.RemoveAt(id);
            Model?.RemoveAt(id);
            await Session.SetItemAsync<List<GioHangViewModel>>("cart", cart);
        }
        await Session.SetItemAsync<List<GioHangViewModel>>("cart", cart);
        await Task.Run(ReTotal);
    }

    private async Task<int> IsExist(Guid? id)
    {
        List<GioHangViewModel> cart = await Session.GetItemAsync<List<GioHangViewModel>>("cart");
        if (cart != null)
        {
            for (int i = 0; i < cart.Count; i++)
            {
                var result = cart[i]?.SanPhamViewModel?.ChiTietSp?.Id.Equals(id);
                if (result ?? false)
                {
                    return i;
                }
            }
        }
        return -1;
    }

    private async Task RemoveCart(Guid? id)
    {
        List<GioHangViewModel> cart = await Session.GetItemAsync<List<GioHangViewModel>>("cart");
        int index = await IsExist(id);
        if (index != -1)
        {
            cart.RemoveAt(index);
            await Session.SetItemAsync<List<GioHangViewModel>>("cart", cart);
            Model = await Session.GetItemAsync<List<GioHangViewModel>>("cart");
        }
        await Task.Run(ReTotal);
    }

    private async Task AddOrder()
    {
        if (await Session.GetItemAsync<List<GioHangViewModel>>("cart") != null)
        {
            if (Model != null)
            {
                HoaDon.NgayTao = DateTime.Now;
                HoaDon.Ma = "123";
                using (var httpClient = new HttpClient())
                {
                    await httpClient.PostAsJsonAsync<HoaDon>("https://localhost:7033/api/hoadon", HoaDon);
                    foreach (var x in Model)
                    {
                        var result = new HoaDonChiTiet()
                            {
                                IdHoaDon = HoaDon.Id,
                                IdChiTietSp = x.SanPhamViewModel?.ChiTietSp?.Id ?? Guid.NewGuid(),
                                DonGia = x.SanPhamViewModel?.ChiTietSp?.GiaBan ?? 0,
                                SoLuong = x.Quantity
                            };
                        await httpClient.PostAsJsonAsync<HoaDonChiTiet>("https://localhost:7033/api/hoadonchitiet", result);
                    }
                }
                await Session.RemoveItemAsync("cart");
                Model = null; HoaDon = new HoaDon();
            }
        }
    }
}
