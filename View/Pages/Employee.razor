@page "/employee"
@page "/employee/page/{CurrentPageIndex:int}"
@inject ISessionStorageService Session
@inject NavigationManager NavigationManager
@layout LayoutAdmin
@using Data.DomainClass
@using Data.ViewModels
@using System.Net.Http.Headers

<PageTitle>Nhân viên</PageTitle>

<div class="container-fluid mt--7">
    <div class="row">
        <div class="col-xl-12 order-xl-1">
            <div class="card bg-secondary shadow">
                <div class="card-header bg-white border-0">
                    <div class="row align-items-center">
                        <div class="col-8">
                            <strong class="mb-0">Quản lý nhân viên</strong>
                        </div>
                        <div class="col-4 text-right">
                            <NavLink class="btn btn-sm btn-info" href="/rule">Chức vụ</NavLink>
                            <NavLink class="btn btn-sm btn-warning" href="/store">Cửa hàng</NavLink>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <EditForm Model="NhanVien" OnSubmit="Create">
                        <DataAnnotationsValidator />
                        <div class="px-lg-4">
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="form-group focused">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-id">Mã nhân viên</label>
                                            <ValidationMessage For="@(() => NhanVien.Ma)"></ValidationMessage>
                                        </div>
                                        <input type="text" id="input-id" @bind-value="NhanVien.Ma" class="form-control form-control-alternative" placeholder="Nhập mã nhân viên">
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-name">Tên họ tên nhân viên</label>
                                            <ValidationMessage For="@(() => NhanVien.Ten)"></ValidationMessage>
                                        </div>
                                        <div class="row">
                                            <div class="col pr-0">
                                                <input type="text" id="input-name" @bind-value="NhanVien.Ho" class="form-control form-control-alternative" placeholder="Nhập họ">
                                            </div>
                                            <div class="col pr-0">
                                                <input type="text" id="input-name" @bind-value="NhanVien.TenDem" class="form-control form-control-alternative" placeholder="Nhập tên đệm">
                                            </div>
                                            <div class="col">
                                                <input type="text" id="input-name" @bind-value="NhanVien.Ten" class="form-control form-control-alternative" placeholder="Nhập tên">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label">Giới tính</label>
                                            <ValidationMessage For="@(() => NhanVien.GioiTinh)"></ValidationMessage>
                                        </div>
                                        <InputSelect @bind-Value="NhanVien.GioiTinh" class="form-control" data-toggle="select">
                                            <option value="">Chọn giới tính</option>
                                            <option value="Nam">Nam</option>
                                            <option value="Nữ">Nữ</option>
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-id">Ngày sinh</label>
                                            <ValidationMessage For="@(() => NhanVien.NgaySinh)"></ValidationMessage>
                                        </div>
                                        <InputDate class="form-control" @bind-Value="NhanVien.NgaySinh"></InputDate>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-address">Địa chỉ nhân viên</label>
                                            <ValidationMessage For="@(() => NhanVien.DiaChi)"></ValidationMessage>
                                        </div>
                                        <input type="text" id="input-address" @bind-value="NhanVien.DiaChi" class="form-control form-control-alternative" placeholder="Nhập địa chỉ nhân viên">
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-address">Số điện thoại nhân viên</label>
                                            <ValidationMessage For="@(() => NhanVien.Sdt)"></ValidationMessage>
                                        </div>
                                        <input type="text" id="input-address" @bind-value="NhanVien.Sdt" class="form-control form-control-alternative" placeholder="Nhập số điện thoại nhân viên">
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label">Chức vụ</label>
                                            <ValidationMessage For="@(() => NhanVien.IdCv)"></ValidationMessage>
                                        </div>
                                        <InputSelect @bind-Value="NhanVien.IdCv" class="form-control" data-toggle="select">
                                            @if (ChucVus != null)
                                            {
                                                <option value="">Chọn chức vụ</option>
                                                @foreach (var x in ChucVus)
                                                {
                                                    <option value="@x.Id">@x.Ten</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label">Cửa hàng</label>
                                            <ValidationMessage For="@(() => NhanVien.IdCh)"></ValidationMessage>
                                        </div>
                                        <InputSelect @bind-Value="NhanVien.IdCh" class="form-control" data-toggle="select">
                                            @if (CuaHangs != null)
                                            {
                                                <option value="">Chọn cửa hàng</option>
                                                @foreach (var x in CuaHangs)
                                                {
                                                    <option value="@x.Id">@x.Ten</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label">Gửi báo cáo</label>
                                            <ValidationMessage For="@(() => NhanVien.IdGuiBc)"></ValidationMessage>
                                        </div>
                                        <InputSelect @bind-Value="NhanVien.IdGuiBc" class="form-control" data-toggle="select">
                                            @if (NhanViens != null)
                                            {
                                                <option value="">Chọn nhân viên</option>
                                                @foreach (var x in NhanViens)
                                                {
                                                    <option value="@x.Id">@x.Ten</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-address">Mật khẩu</label>
                                            <ValidationMessage For="@(() => NhanVien.MatKhau)"></ValidationMessage>
                                        </div>
                                        <input type="text" id="input-address" @bind-value="NhanVien.MatKhau" class="form-control form-control-alternative" placeholder="Nhập mật khẩu">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    @if (NhanVien.Id == Guid.Empty)
                                    {
                                        <button type="submit" class="btn btn-info">Thêm</button>
                                    }
                                    else
                                    {
                                        <button type="button" @onclick="() => Update(context)" class="btn btn-danger">Sửa</button>
                                        <button type="button" class="btn btn-white" @onclick="Clear">Hủy</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="card shadow">
                <div class="card-header border-0">
                    <div class="row">
                        <div class="col-lg-6 d-flex align-items-center">
                            <h3 class="mb-0">Danh sách nhân viên</h3>
                        </div>
                        <div class="col-lg-6 text-right">
                            <div class="dropdown mb-0">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Hiển thị @RowName kết quả
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <button class="dropdown-item" @onclick="() => ChangeMaxRow(5)">5</button>
                                    <button class="dropdown-item" @onclick="() => ChangeMaxRow(10)">10</button>
                                    <button class="dropdown-item" @onclick="() => ChangeMaxRow(15)">15</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table align-items-center table-flush">
                        <thead class="thead-light">
                            <tr>
                                <th>Mã chức vụ</th>
                                <th>Họ và tên</th>
                                <th>Giới tính</th>
                                <th>Chức vụ</th>
                                <th>Cửa hàng quản lý</th>
                                <th>Số điện thoại</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (NhanVienViewModels != null)
                            {
                                @foreach (var x in NhanVienViewModels.Skip((CurrentPageIndex - 1) * MaxRow).Take(MaxRow))
                                {
                                    <tr>
                                        <td>@x.NhanVien?.Ma</td>
                                        <td>@x.NhanVien?.Ho @x.NhanVien?.TenDem @x.NhanVien?.Ten</td>
                                        <td>@x.NhanVien?.GioiTinh</td>
                                        <td>@x.ChucVu?.Ten</td>
                                        <td>@x.CuaHang?.Ten</td>
                                        <td>@x.NhanVien?.Sdt</td>
                                        <td>
                                            <button class="btn btn-warning" @onclick="() => Display(x.NhanVien?.Id)">Sửa</button>
                                            <button class="btn btn-danger" @onclick="() => Display(x.NhanVien?.Id)" data-toggle="modal" data-target="#popup">Xóa</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <div class="card-footer py-4">
                    @if (NhanViens != null)
                    {
                        <Pagination Model="NhanViens" MaxRow="MaxRow" CurrentPageIndex="CurrentPageIndex" Namespace="employee"></Pagination>
                    }
                </div>
            </div>
        </div>
    </div>
    <Popup Message="Bạn có chắc muốn xóa?" PopupType="Popup.PopupTypes.Confirm" Method="() => Delete(NhanVien?.Id)"></Popup>
</div>

@code {
    [Parameter]
    public int CurrentPageIndex { get; set; }

    private int MaxRow = 5;

    private List<NhanVien>? NhanViens;

    private List<CuaHang>? CuaHangs;

    private List<ChucVu>? ChucVus;

    private List<NhanVienViewModel>? NhanVienViewModels;

    private NhanVien NhanVien = new NhanVien();

    private int RowName = 5;

    private void ChangeMaxRow(int maxRow)
    {
        MaxRow = maxRow;
        RowName = maxRow;
    }

    protected override async Task OnInitializedAsync()
    {
        if (await Session.GetItemAsStringAsync("isLogin") == null) NavigationManager.NavigateTo("/login");
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await Session.GetItemAsStringAsync("isLogin"));
            CuaHangs = await httpClient.GetFromJsonAsync<List<CuaHang>>("https://localhost:7033/api/cuahang");
            ChucVus = await httpClient.GetFromJsonAsync<List<ChucVu>>("https://localhost:7033/api/chucvu");
            NhanVienViewModels = await httpClient.GetFromJsonAsync<List<NhanVienViewModel>>("https://localhost:7033/api/nhanvien/getnhanvienviewmodel");
            NhanViens = await httpClient.GetFromJsonAsync<List<NhanVien>>("https://localhost:7033/api/nhanvien");
        }
    }

    protected override Task OnParametersSetAsync()
    {
        if (CurrentPageIndex == 0) CurrentPageIndex = 1;
        return base.OnParametersSetAsync();
    }

    private async Task Create(EditContext context)
    {
        if (context.Validate())
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await Session.GetItemAsStringAsync("isLogin"));
                using (var response = await httpClient.PostAsJsonAsync("https://localhost:7033/api/nhanvien", NhanVien))
                {
                    if(response.IsSuccessStatusCode){
                        NhanVienViewModels = await httpClient.GetFromJsonAsync<List<NhanVienViewModel>>("https://localhost:7033/api/nhanvien/getnhanvienviewmodel");
                        NhanViens = await httpClient.GetFromJsonAsync<List<NhanVien>>("https://localhost:7033/api/nhanvien");
                    }
                }
                Clear();
            }
        }
    }

    private async Task Delete(Guid? id)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await Session.GetItemAsStringAsync("isLogin"));
            using (var response = await httpClient.DeleteAsync("https://localhost:7033/api/nhanvien/" + id))
            {
                if (response.IsSuccessStatusCode) { 
                    NhanVienViewModels = await httpClient.GetFromJsonAsync<List<NhanVienViewModel>>("https://localhost:7033/api/nhanvien/getnhanvienviewmodel");
                    NhanViens = await httpClient.GetFromJsonAsync<List<NhanVien>>("https://localhost:7033/api/nhanvien");
                }
            }
            Clear();
        }
    }

    private async Task Update(EditContext context)
    {
        if (context.Validate())
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await Session.GetItemAsStringAsync("isLogin"));
                using (var response = await httpClient.PutAsJsonAsync<NhanVien>("https://localhost:7033/api/nhanvien/" + NhanVien.Id, NhanVien))
                {
                    if (response.IsSuccessStatusCode) { 
                        NhanVienViewModels = await httpClient.GetFromJsonAsync<List<NhanVienViewModel>>("https://localhost:7033/api/nhanvien/getnhanvienviewmodel");
                        NhanViens = await httpClient.GetFromJsonAsync<List<NhanVien>>("https://localhost:7033/api/nhanvien");
                    }
                }
                Clear();
            }
        }
    }

    private void Display(Guid? id)
    {
        var NhanVien = NhanViens?.FirstOrDefault(c => c.Id == id);
        if (NhanVien != null) this.NhanVien = NhanVien;
    }

    private void Clear()
    {
        NhanVien = new NhanVien();
    }
}
