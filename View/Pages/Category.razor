@page "/category"
@page "/category/page/{CurrentPageIndex:int}"
@page "/category/name/{NameSearch}"
@inject ISessionStorageService Session
@inject NavigationManager NavigationManager
@layout LayoutAdmin
@using Data.DomainClass
@using System.Net.Http.Headers

<PageTitle>Dòng sản phẩm</PageTitle>

<div class="container-fluid mt--7">
    <div class="row">
        <div class="col-xl-12 order-xl-1">
            <div class="card bg-secondary shadow">
                <div class="card-header bg-white border-0">
                    <div class="row align-items-center">
                        <div class="col">
                            <strong class="mb-0">Quản lý dòng sản phẩm</strong>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <EditForm Model="DongSp" OnValidSubmit="Create">
                        <DataAnnotationsValidator />
                        <div class="px-lg-4">
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="form-group focused">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-id">Mã dòng sản phẩm</label>
                                            <ValidationMessage For="@(() => DongSp.Ma)"></ValidationMessage>
                                        </div>
                                        <input type="text" id="input-id" @bind-value="DongSp.Ma" class="form-control form-control-alternative" placeholder="Nhập mã dòng sản phẩm">
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-control-label" for="input-name">Tên dòng sản phẩm</label>
                                            <ValidationMessage For="@(() => DongSp.Ten)"></ValidationMessage>
                                        </div>
                                        <input type="text" id="input-name" @bind-value="DongSp.Ten" class="form-control form-control-alternative" placeholder="Nhập tên dòng sản phẩm">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    @if (DongSp.Id == Guid.Empty)
                                    {
                                        <button type="submit" class="btn btn-info">Thêm</button>
                                    }
                                    else
                                    {
                                        <button type="button" @onclick="() => Update(context)" class="btn btn-danger">Sửa</button>
                                        <button type="button" class="btn btn-white" @onclick="Clear">Hủy</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="card shadow">
                <div class="card-header border-0">
                    <div class="row">
                        <div class="col-lg-6 d-flex align-items-center">
                            <h3 class="mb-0">Danh sách dòng sản phẩm</h3>
                        </div>
                        <div class="col-lg-6 text-right">
                            <div class="dropdown mb-0">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Hiển thị @MaxRow kết quả
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <button class="dropdown-item" @onclick="() => ChangeMaxRow(5)">5</button>
                                    <button class="dropdown-item" @onclick="() => ChangeMaxRow(10)">10</button>
                                    <button class="dropdown-item" @onclick="() => ChangeMaxRow(15)">15</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table align-items-center table-flush">
                        <thead class="thead-light">
                            <tr>
                                <th style="width: 25%;">STT</th>
                                <th style="width: 25%;">Mã dòng sản phẩm</th>
                                <th style="width: 25%;">Tên dòng sản phẩm</th>
                                <th style="width: 25%;">Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (DongSps != null)
                            {
                                var Model = DongSps.Skip((CurrentPageIndex - 1) * MaxRow).Take(MaxRow).Take(MaxRow).ToList(); // Ví dụ lấy 5 sản phẩm mỗi trang và tổng sản phẩm là 20 => Có 4 trang
                                // CurrentPageIndex là trang hiện tại, MaxRow là số sản phẩm sẽ hiển thị trong 1 trang
                                foreach (var x in NameSearch != null ? Model.Select((Value, Index) => new { Value, Index }) // Nếu NameSearch khác null thì Model sẽ lấy index và giá trị của các bản ghi có tên gần đúng với NameSearch
                                        .Where(c => c?.Value.Ten?.ToLower().Trim().Contains(NameSearch.ToLower().Trim()) ?? false) 
                                        : Model.Select((Value, Index) => new { Value, Index }))
                                {
                                    <tr>
                                        <td>@(x.Index + 1)</td>
                                        <td>@x.Value.Ma</td>
                                        <td>@x.Value.Ten</td>
                                        <td>
                                            <button class="btn btn-warning" @onclick="() => Display(x.Value.Id)">Sửa</button>
                                            <button class="btn btn-danger" @onclick="() => Display(x.Value.Id)" data-toggle="modal" data-target="#popup">Xóa</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <div class="card-footer py-4">
                    @if(DongSps != null){
                        <Pagination Model="DongSps" MaxRow="MaxRow" CurrentPageIndex="CurrentPageIndex" Namespace="category"></Pagination>
                    }
                </div>
            </div>
        </div>
    </div>
    <Popup Message="Bạn có chắc muốn xóa?" PopupType="Popup.PopupTypes.Confirm" Method="() => Delete(DongSp?.Id)"></Popup>
</div>

@code {
    [Parameter]
    public int CurrentPageIndex { get; set; }

    [Parameter]
    public string? NameSearch { get; set; }

    private int MaxRow = 5;

    private List<DongSp>? DongSps;

    private DongSp DongSp = new DongSp();

    private string? jwt = null;

    private void ChangeMaxRow(int MaxRow)
    {
        this.MaxRow = MaxRow;
    }

    protected override async Task OnInitializedAsync()
    {
        // Nếu chưa đăng nhập thì sẽ chuyển hướng người dùng về trang đăng nhập
        if (await Session.GetItemAsStringAsync("jwt") == null) NavigationManager.NavigateTo("/login");
        using (var httpClient = new HttpClient())
        {
            jwt = await Session.GetItemAsStringAsync("jwt"); 

            if(jwt != null) 
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            // Cập nhật lại dữ liệu cho list
            DongSps = await httpClient.GetFromJsonAsync<List<DongSp>>("https://localhost:7033/api/dongsp");
        }
    }

    protected override Task OnParametersSetAsync()
    {
        if (CurrentPageIndex == 0) CurrentPageIndex = 1;
        return base.OnParametersSetAsync();
    }

    private async Task Create(EditContext context)
    {
        if (context.Validate())
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
                using (var httpResponse = await httpClient.PostAsJsonAsync("https://localhost:7033/api/dongsp", DongSp))
                {
                    if (httpResponse.IsSuccessStatusCode)
                        DongSps = await httpClient.GetFromJsonAsync<List<DongSp>>("https://localhost:7033/api/dongsp");
                }
                Clear();
            }
        }
    }

    private async Task Delete(Guid? id)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            using (var httpResponse = await httpClient.DeleteAsync("https://localhost:7033/api/dongsp/" + id))
            {
                if (httpResponse.IsSuccessStatusCode)
                    DongSps = await httpClient.GetFromJsonAsync<List<DongSp>>("https://localhost:7033/api/dongsp");
            }
            Clear();
        }
    }

    private async Task Update(EditContext Context)
    {
        if (Context.Validate())
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
                using (var httpResponse = await httpClient.PutAsJsonAsync<DongSp>("https://localhost:7033/api/dongsp/" + DongSp.Id, DongSp))
                {
                    if (httpResponse.IsSuccessStatusCode)
                        DongSps = await httpClient.GetFromJsonAsync<List<DongSp>>("https://localhost:7033/api/dongsp");
                }
                Clear();
            }
        }
    }

    private void Clear()
    {
        DongSp = new DongSp();
    }

    private void Display(Guid? id)
    {
        var DongSp = DongSps?.FirstOrDefault(c => c.Id == id);
        if (DongSp != null) this.DongSp = DongSp;
    }
}
