@page "/profile"
@using Data.ViewModels
@using System.IdentityModel.Tokens.Jwt
@using System.Net.Http.Headers
@inject ISessionStorageService Session
@inject NavigationManager NavigationManager
@layout LayoutAdmin

@if (Model != null)
{
    <div class="header pb-8 pt-5 pt-lg-8 d-flex align-items-center" style="min-height: 600px; background-image: url(../assets/img/theme/profile-cover.jpg); background-size: cover; background-position: center top;">
        <!-- Mask -->
        <span class="mask bg-gradient-default opacity-8"></span>
        <!-- Header container -->
        <div class="container-fluid d-flex align-items-center">
            <div class="row">
                <div class="col-lg-7 col-md-10">
                    <h1 class="display-2 text-white">Hello @Model.NhanVien?.Ten</h1>
                    <p class="text-white mt-0 mb-5">This is your profile page. You can see the progress you've made with your work and manage your projects or assigned tasks</p>
                    <button class="btn btn-info" @onclick="StartEdit">Edit profile</button>
                </div>
            </div>
        </div>
    </div>

    @if (Model.NhanVien != null && Model.ChucVu != null && Model.CuaHang != null)
    {
        <div class="container-fluid mt--7">
            <div class="row justify-content-center">
                @if(!Status){
                    <div class="col-xl-4 order-xl-2 mb-5 mb-xl-0">
                        <div class="card card-profile shadow">
                            <div class="row justify-content-center">
                                <div class="col-lg-3 order-lg-2">
                                    <div class="card-profile-image">
                                        <a href="#">
                                            <img src="../assets/img/theme/team-4-800x800.jpg" class="rounded-circle">
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <div class="card-header text-center border-0 pt-8 pt-md-4 pb-0 pb-md-4">
                            </div>
                            <div class="card-body pt-0 pt-md-4">
                                <div class="row">
                                    <div class="col">
                                        <div class="card-profile-stats d-flex justify-content-center mt-md-5">
                                            <div>
                                                <span class="heading">22</span>
                                                <span class="description">Đơn hàng bán được</span>
                                            </div>
                                            <div>
                                                <span class="heading">10</span>
                                                <span class="description">Đơn hàng bị hủy</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-center">
                                    <h3>
                                        @Model.NhanVien.Ho @Model.NhanVien.TenDem @Model.NhanVien.Ten <span class="font-weight-light"> @(DateTime.Now.Year - Model.NhanVien.NgaySinh.Value.Year) tuổi</span>
                                    </h3>
                                    <p>
                                        Địa chỉ : @Model.NhanVien.DiaChi
                                    </p>
                                    <p>
                                        Số điện thoại : @Model.NhanVien.Sdt
                                    </p>
                                    <strong>
                                        Chức vụ : @Model.ChucVu.Ten - <span class="text-danger">Cửa hàng : @Model.CuaHang.Ten</span>
                                    </strong>
                                </div>
                            </div>
                        </div>
                    </div>
                }else{
                    <div class="col-xl-12 order-xl-1">
                        <div class="card bg-secondary shadow">
                            <div class="card-header bg-white border-0">
                                <div class="row align-items-center">
                                    <div class="col-12">
                                        <h3 class="mb-0">Tài khoản của tôi</h3>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                @if (Model.NhanVien != null && Model.ChucVu != null && Model.CuaHang != null)
                                {
                                    <EditForm Model="Model">
                                        <div class="pl-lg-4">
                                            <div class="row">
                                                <div class="col-lg-4">
                                                    <div class="form-group">
                                                        <div class="d-flex justify-content-between">
                                                            <label class="form-control-label" for="input-last-name">Họ</label>
                                                            <ValidationMessage For="@(() => Model.NhanVien.Ho)"></ValidationMessage>
                                                        </div>
                                                        <input type="text" id="input-last-name" class="form-control form-control-alternative" @bind-value="Model.NhanVien.Ho">
                                                    </div>
                                                </div>
                                                <div class="col-lg-4">
                                                    <div class="form-group">
                                                        <div class="d-flex justify-content-between">
                                                            <label class="form-control-label" for="input-sub-name">Tên đệm</label>
                                                            <ValidationMessage For="@(() => Model.NhanVien.TenDem)"></ValidationMessage>
                                                        </div>
                                                        <input type="text" id="input-sub-name" class="form-control form-control-alternative" @bind-value="Model.NhanVien.TenDem">
                                                    </div>
                                                </div>
                                                <div class="col-lg-4">
                                                    <div class="form-group">
                                                        <div class="d-flex justify-content-between">
                                                            <label class="form-control-label" for="input-first-name">Tên</label>
                                                            <ValidationMessage For="@(() => Model.NhanVien.Ten)"></ValidationMessage>
                                                        </div>
                                                        <input type="text" id="input-first-name" class="form-control form-control-alternative" @bind-value="Model.NhanVien.Ten">
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-lg-6">
                                                    <div class="form-group">
                                                        <div class="d-flex justify-content-between">
                                                            <label class="form-control-label" for="input-phone">Số điện thoại</label>
                                                            <ValidationMessage For="@(() => Model.NhanVien.Sdt)"></ValidationMessage>
                                                        </div>
                                                        <input type="email" id="input-phone" class="form-control form-control-alternative" @bind-value="Model.NhanVien.Sdt">
                                                    </div>
                                                </div>
                                                <div class="col-lg-6">
                                                    <div class="form-group">
                                                        <div class="d-flex justify-content-between">
                                                            <label class="form-control-label" for="input-address">Địa chỉ</label>
                                                            <ValidationMessage For="@(() => Model.NhanVien.DiaChi)"></ValidationMessage>
                                                        </div>
                                                        <input type="email" id="input-address" class="form-control form-control-alternative" @bind-value="Model.NhanVien.DiaChi">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="pl-lg-4 text-right">
                                            <button class="btn btn-primary">Xác nhận</button>
                                        </div>
                                    </EditForm>
                                }
                            </div>
                        </div>
                    </div>
                }  
            </div>
            <Footer></Footer>
        </div>
    }
}

@code {
    private NhanVienViewModel? Model = new NhanVienViewModel();

    private bool Status = false;

    protected async override Task OnInitializedAsync()
    {
        if (await Session.GetItemAsStringAsync("isLogin") == null) NavigationManager.NavigateTo("/login");
        var jwt = new JwtSecurityTokenHandler().ReadJwtToken(await Session.GetItemAsStringAsync("isLogin"));
        var id = jwt.Claims.FirstOrDefault(c => c.Type == "Id");
        if(id != null){
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await Session.GetItemAsStringAsync("isLogin"));
                Model = await httpClient.GetFromJsonAsync<NhanVienViewModel>("https://localhost:7033/api/nhanvien/getnhanvienviewmodel/" + id.Value);
            }
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        if (await Session.GetItemAsStringAsync("isLogin") == null) NavigationManager.NavigateTo("/login");
        var jwt = new JwtSecurityTokenHandler().ReadJwtToken(await Session.GetItemAsStringAsync("isLogin"));
        var id = jwt.Claims.FirstOrDefault(c => c.Value == "Id");
        if (id != null)
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await Session.GetItemAsStringAsync("isLogin"));
                Model = await httpClient.GetFromJsonAsync<NhanVienViewModel>("https://localhost:7033/api/nhanvien/getnhanvienviewmodel/" + id.Value);
            }
        }
    }

    private void StartEdit(){
        Status = true;
    }
}
