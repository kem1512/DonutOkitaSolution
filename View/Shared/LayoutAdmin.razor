@using Data.DomainClass
@using System.IdentityModel.Tokens.Jwt
@inherits LayoutComponentBase
@inject ISessionStorageService Session
@inject NavigationManager NavigationManager

<NavMenu />
<div class="main-content">
    <!-- Navbar -->
    <nav class="navbar navbar-top navbar-expand-md navbar-dark" id="navbar-main">
        <div class="container-fluid">
            <!-- Brand -->
            <NavLink class="h4 mb-0 text-white text-uppercase d-none d-lg-inline-block" href="/">Trang chủ</NavLink>
            <!-- Form -->
            <div class="navbar-search navbar-search-dark form-inline mr-3 d-none d-md-flex ml-lg-auto">
                <div class="form-group mb-0">
                    <div class="input-group input-group-alternative">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                        </div>
                        <input class="form-control" placeholder="Search" type="text" @bind-value="NameSearch" @onkeyup="Search" @onkeyup:preventDefault="true">
                    </div>
                </div>
            </div>
            <!-- User -->
            <ul class="navbar-nav align-items-center d-none d-md-flex">
                <li class="nav-item dropdown">
                    <a class="nav-link pr-0" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <div class="media align-items-center">
                            <span class="avatar avatar-sm rounded-circle">
                                <img alt="Image placeholder" src="./assets/img/theme/team-4-800x800.jpg">
                            </span>
                            <div class="media-body ml-2 d-none d-lg-block">
                                <span class="mb-0 text-sm  font-weight-bold">@Name</span>
                            </div>
                        </div>
                    </a>
                    <div class="dropdown-menu dropdown-menu-arrow dropdown-menu-right">
                        <div class=" dropdown-header noti-title">
                            <h6 class="text-overflow m-0">Welcome!</h6>
                        </div>
                        <NavLink class="dropdown-item" href="/profile">
                            <i class="ni ni-single-02"></i>
                            <span>My profile</span>
                        </NavLink>
                        <NavLink href="/setting" class="dropdown-item">
                            <i class="ni ni-settings-gear-65"></i>
                            <span>Settings</span>
                        </NavLink>
                        <NavLink href="/active" class="dropdown-item">
                            <i class="ni ni-calendar-grid-58"></i>
                            <span>Activity</span>
                        </NavLink>
                        <NavLink href="/support" class="dropdown-item">
                            <i class="ni ni-support-16"></i>
                            <span>Support</span>
                        </NavLink>
                        <div class="dropdown-divider"></div>
                        <button class="dropdown-item" @onclick="LogOut">
                            <i class="ni ni-user-run"></i>
                            <span>Logout</span>
                        </button>
                    </div>
                </li>
            </ul>
        </div>
    </nav>
    @if (!NavigationManager.Uri.Contains("profile"))
    {
        <div class="header bg-gradient-primary pb-8 pt-5 pt-md-8">
        </div>
    }

    @if (!NavigationManager.Uri.Contains("login"))
    {
        @Body
    }
</div>

@code {
    private string? Name;

    private string? NameSearch;

    protected async override Task OnInitializedAsync()
    {
        if (await Session.GetItemAsStringAsync("isLogin") != null)
        {
            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(await Session.GetItemAsStringAsync("isLogin"));
            var result = jwt.Claims.FirstOrDefault(c => c.Type.Equals("FirstName"));
            if (result != null)
            {
                Name = result.Value;
            }
        }
    }

    private void Redirected(string uri){
        if (!string.IsNullOrEmpty(NameSearch))
        {
            NavigationManager.NavigateTo($"/{uri}/{NameSearch?.ToLower().Trim()}");
        }
        else
        {
            if (NavigationManager.Uri.Contains("name")){
                NavigationManager.NavigateTo("/");
            }else{
                NavigationManager.NavigateTo($"/{uri}");
            }
        }
    }

    private void Search(KeyboardEventArgs args){
        if(args.Key == "Enter"){
            switch (NavigationManager.Uri)
            {
                case string c when c.Contains("category"):
                    Redirected("category");
                    break;
                case string c when c.Contains("color"):
                    Redirected("color");
                    break;
                case string c when c.Contains("employee"):
                    Redirected("employee");
                    break;
                case string c when c.Contains("invoice"):
                    Redirected("invoice");
                    break;
                case string c when c.Contains("producer"):
                    Redirected("producer");
                    break;
                case string c when c.Contains("product"):
                    Redirected("product");
                    break;
                case string c when c.Contains("productdetail"):
                    Redirected("productdetail");
                    break;
                case string c when c.Contains("rule"):
                    Redirected("rule");
                    break;
                case string c when c.Contains("store"):
                    Redirected("store");
                    break;
                default:
                    Redirected("name");
                    break;
            }
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        if (await Session.GetItemAsStringAsync("isLogin") != null)
        {
            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(await Session.GetItemAsStringAsync("isLogin"));
            var firstName = jwt.Claims.FirstOrDefault(c => c.Type.Equals("FirstName"));
            var lastName = jwt.Claims.FirstOrDefault(c => c.Type.Equals("LastName"));
            if (firstName != null && lastName != null)
            {
                Name = firstName.Value + " " + lastName.Value;
            }
        }
    }

    private async Task LogOut()
    {
        if (await Session.GetItemAsStringAsync("isLogin") != null)
        {
            await Session.RemoveItemAsync("isLogin");
            NavigationManager.NavigateTo("/login");
        }
    }
}
